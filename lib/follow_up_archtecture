lib/
├── core/
│   ├── config/          # Theme, constants, localization
│   ├── network/         # API clients, interceptors
│   ├── utils/           # Helpers, validators, extensions
│   └── services/        # Auth, Firebase, etc.
│
├── data/
│   ├── models/          # Model classes (User, Agency, Package, etc.)
│   ├── repositories/    # Abstractions and implementations
│   └── datasources/     # Remote & local data sources
│
├── domain/
│   ├── entities/        # Pure business logic models
│   └── usecases/        # Application-specific business rules
│
├── presentation/
│   ├── cubits/          # Cubits/States (organized by feature)
│   ├── views/           # Screens (UI only)
│   ├── widgets/         # Shared widgets
│   └── routes/          # Navigation and route handling
│
└── main.dart
Future<bool> callMistral({
    required String prompt,
    required String language,
    required String tone,
    required String length,
  }) async {
    // 📝 Strong instruction for AI
    final instruction = """
You are an AI email writing assistant.

Your task:
- Rewrite the user’s draft into a full, natural, professional email.
- Always write the ENTIRE email in the $language language (do not use English).
- Use a $tone tone.
- Length should be $length (Short ≈ 50 words, Medium ≈ 100 words, Long ≈ 200 words).

User’s draft:
"$prompt"
""";


    // 🎚 Map length → tokens
    final int maxTokens = length.toLowerCase() == "short"
        ? 75
        : length.toLowerCase() == "medium"
        ? 150
        : 300;

    final body = {
      "model": "mistral-small-latest",
      "messages": [
        {"role": "system", "content": "You are a helpful email assistant."},
        {"role": "user", "content": instruction},
      ],
      "temperature": 0.7,
      "max_tokens": maxTokens,
    };

    isLoading.value = true;
    responseText.value = "⏳ Thinking...";

    try {
      final data = await apiClient.post(ApiRoutes.chatCompletions, body);
      responseText.value = data["choices"][0]["message"]["content"];
      log("✅ Success: ${responseText.value}");
      return true;
    } catch (e) {
      responseText.value = "Exception: $e";
      log("❌ Error: $e");
      return false;
    } finally {
      isLoading.value = false;
    }
  }